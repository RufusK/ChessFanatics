@page "/auth/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Login</PageTitle>

<MudPaper Class="pa-6" Elevation="6" Style="max-width: 400px; margin: auto; margin-top: 100px;">
    <MudText Typo="Typo.h5" Align="Align.Center" GutterBottom="true">Login</MudText>
    <EditForm FormName="Login" Model="loginModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <MudTextField @bind-Value="loginModel.Email" Label="Email" For="@(() => loginModel.Email)" Required="true" Margin="Margin.Normal" />
        <MudTextField @bind-Value="loginModel.Password" Label="Password" For="@(() => loginModel.Password)" InputType="InputType.Password" Required="true" Margin="Margin.Normal" />
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" Class="mt-4">
            Login
        </MudButton>
    </EditForm>
</MudPaper>

@code {
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;
    
    private LoginModel loginModel = new();
    
    // protected override async Task OnInitializedAsync()
    // {
    //     if (HttpMethods.IsGet(HttpContext.Request.Method))
    //     {
    //         // Clear the existing external cookie to ensure a clean login process
    //         await HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);
    //     }
    // }

    private async Task HandleValidSubmit()
    {
        // Replace this with your actual authentication logic, for example:
        var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, true, false);
        if (result.Succeeded) {
            NavigationManager.NavigateTo("/", true);
        } else {
            Snackbar.Add("Invalid login attempt", Severity.Error);
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}