@page "/Manage/Tournaments/{id}/CreateNextRound"
<h3 class="mb-4 text-center">Create Round @(Tournament?.CurrentRound + 1)</h3>

@foreach (var (game, index) in Games.Select((game, index) => (game, index)))
{
    <div class="container mb-2">
        <div class="row no-wrap">
            <div class="d-flex align-items-center justify-content-center"
                 style="width: 30px; flex: 0 0 30px;">@(index + 1)</div>
            <div class="col-flex">
                <HxAutosuggest
                    TItem="TournamentParticipation"
                    TValue="int?"
                    @bind-Value="@game.White"
                    DataProvider="ProvideSuggestions"
                    ValueSelector="employee => employee.Id"
                    TextSelector='employee => $"{employee.Player.FirstName} {employee.Player.LastName} ({employee.Player.Email})"'
                    MinimumLength="0"
                    ItemFromValueResolver="ResolveAutosuggestItemFromValue"
                    InputGroupStartText="White"
                    SearchIcon="null"/>
            </div>
            <div class="d-flex align-items-center justify-content-center" style="width: 115px; flex: 0 0 115px;">
                <GameResultSelector @bind-Value="@game.GameResult"/>
            </div>
            <div class="col-flex">
                <HxAutosuggest
                    TItem="TournamentParticipation"
                    TValue="int?"
                    @bind-Value="@game.Black"
                    DataProvider="ProvideSuggestions"
                    ValueSelector="employee => employee.Id"
                    TextSelector='employee => $"{employee.Player.FirstName} {employee.Player.LastName} ({employee.Player.Email})"'
                    MinimumLength="0"
                    ItemFromValueResolver="ResolveAutosuggestItemFromValue"
                    InputGroupEndText="Black"
                    SearchIcon="null"/>
            </div>
            <div class="d-flex align-items-center justify-content-center" style="width: 50px; flex: 0 0 50px;">
                <HxButton Icon="BootstrapIcon.Trash" Color="ThemeColor.Light" @onclick="() => RemoveGame(game)"/>
            </div>
        </div>
    </div>
}
<div class="mt-2">
    <HxButton Color="ThemeColor.Primary" @onclick="() => Games.Add(new UiGame())" CssClass="mb-2">Add Game</HxButton>
    <HxButton Color="ThemeColor.Primary" @onclick="SaveRound" CssClass="mt-2">Create Round</HxButton>
</div>

@code {
    [Parameter] public required string Id { get; set; }

    private Tournament? Tournament { get; set; }
    private ICollection<TournamentParticipation>? Players { get; set; }

    private ICollection<TournamentParticipation>? PlayersLeft => Players?
        .Where(p => Games.All(x => x.Black != p.Id && x.White != p.Id))
        .ToList();

    private List<UiGame> Games { get; set; } = [new()];

    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        Tournament = await dbContext.Tournaments.FirstAsync(x => x.Id == int.Parse(Id));
        Players = await dbContext.TournamentParticipations
            .Include(x => x.Player)
            .Where(x => x.TournamentId == int.Parse(Id))
            .ToListAsync();
    }

    private class UiGame
    {
        public int? White { get; set; }
        public int? Black { get; set; }
        public GameResult? GameResult { get; set; }
    }

    private Task<AutosuggestDataProviderResult<TournamentParticipation>> ProvideSuggestions(AutosuggestDataProviderRequest request)
    {
        var match = PlayersLeft?.Where(x => x.Player.FirstName.Contains(request.UserInput)).ToList();

        return Task.FromResult(new AutosuggestDataProviderResult<TournamentParticipation> { Data = match });
    }

    private Task<TournamentParticipation?> ResolveAutosuggestItemFromValue(int? value)
    {
        if (value is null || PlayersLeft is null)
        {
            return Task.FromResult<TournamentParticipation?>(null);
        }

        return Task.FromResult(Players?.FirstOrDefault(x => x.Id == value));
    }

    private void RemoveGame(UiGame game)
    {
        Games.Remove(game);
        StateHasChanged();
    }

    private async Task SaveRound()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var round = new TournamentRound
        {
            Games = ConvertUiGamesToGames(Games).ToList(),
            TournamentId = int.Parse(Id),
            RoundNumber = Tournament?.CurrentRound + 1 ?? 1
        };
        dbContext.TournamentRounds.Add(round);
        await dbContext.SaveChangesAsync();
    }

    private IEnumerable<Game> ConvertUiGamesToGames(List<UiGame> games)
    {
        foreach (var game in games)
        {
            if (!game.Black.HasValue)
            {
                game.GameResult = GameResult.Bye;
            }
            
            if (game.White.HasValue)
            {
                yield return new Game
                {
                    PlayerWhiteId = game.White.Value,
                    PlayerBlackId = game.Black,
                    TournamentRoundId = int.Parse(Id),
                    Result = game.GameResult
                };
            }
        }
    }

}