@foreach (var (game, index) in Games.Select((game, index) => (game, index)))
{
    <div class="container mb-2">
        <div class="row no-wrap">
            <div class="d-flex align-items-center justify-content-center"
                 style="width: 30px; flex: 0 0 30px;">@(index + 1)</div>
            <div class="col-flex">
                <HxAutosuggest
                    TItem="TournamentParticipation"
                    TValue="int?"
                    @bind-Value="@game.PlayerWhiteId"
                    DataProvider="ProvideSuggestions"
                    ValueSelector="employee => employee.Id"
                    TextSelector='employee => $"{employee.Player.FirstName} {employee.Player.LastName} ({employee.Player.Email})"'
                    MinimumLength="0"
                    ItemFromValueResolver="ResolveAutosuggestItemFromValue"
                    InputGroupStartText="White"
                    SearchIcon="null"/>
            </div>
            <div class="d-flex align-items-center justify-content-center" style="width: 115px; flex: 0 0 115px;">
                <GameResultSelector @bind-Value="@game.Result"/>
            </div>
            <div class="col-flex">
                <HxAutosuggest
                    TItem="TournamentParticipation"
                    TValue="int?"
                    @bind-Value="@game.PlayerBlackId"
                    DataProvider="ProvideSuggestions"
                    ValueSelector="employee => employee.Id"
                    TextSelector='employee => $"{employee.Player.FirstName} {employee.Player.LastName} ({employee.Player.Email})"'
                    MinimumLength="0"
                    ItemFromValueResolver="ResolveAutosuggestItemFromValue"
                    InputGroupEndText="Black"
                    SearchIcon="null"/>
            </div>
            <div class="d-flex align-items-center justify-content-center" style="width: 50px; flex: 0 0 50px;">
                <HxButton Icon="BootstrapIcon.Trash" Color="ThemeColor.Light" @onclick="() => RemoveGame(game)"/>
            </div>
        </div>
    </div>
}
<div class="mt-4">
    <HxButton Color="ThemeColor.Light" @onclick="() => Games.Add(new Game())">Add Game</HxButton>
    <HxButton Color="ThemeColor.Primary" @onclick="SaveRound">Save</HxButton>
</div>

@code {
    [Parameter] public required int TournamentId { get; set; }
    [Parameter] public required int TournamentRoundId { get; set; }
    [Parameter] public required ICollection<TournamentParticipation> Players { get; set; }

    private TournamentRound? TournamentRound { get; set; }
    private ICollection<Game> Games { get; set; } = [];
    private AppDbContext DbContext;

    private ICollection<TournamentParticipation> PlayersLeft => Players
        .Where(p => Games.All(x => x.PlayerBlackId != p.Id && x.PlayerWhiteId != p.Id))
        .ToList();

    protected override async Task OnInitializedAsync()
    {
        DbContext = await DbContextFactory.CreateDbContextAsync();
        TournamentRound = await DbContext.TournamentRounds.AsTracking()
            .Include(x => x.Games).AsTracking()
            .FirstOrDefaultAsync(x => x.Id == TournamentRoundId);
        if (TournamentRound != null)
        {
            Games = TournamentRound.Games;
        }
    }

    private Task<AutosuggestDataProviderResult<TournamentParticipation>> ProvideSuggestions(AutosuggestDataProviderRequest request)
    {
        var match = PlayersLeft.Where(x => x.Player.FirstName.Contains(request.UserInput)).ToList();

        return Task.FromResult(new AutosuggestDataProviderResult<TournamentParticipation> { Data = match });
    }

    private Task<TournamentParticipation?> ResolveAutosuggestItemFromValue(int? value)
    {
        if (value is null)
        {
            return Task.FromResult<TournamentParticipation?>(null);
        }

        return Task.FromResult(Players.FirstOrDefault(x => x.Id == value));
    }

    private void RemoveGame(Game game)
    {
        Games.Remove(game);
        StateHasChanged();
    }

    private async Task SaveRound()
    {
        Games = CleanupGames(Games).ToList();
        await DbContext.SaveChangesAsync();
    }

    private IEnumerable<Game> CleanupGames(ICollection<Game> games)
    {
        foreach (var game in games)
        {
            if (!game.PlayerWhiteId.HasValue)
            {
                continue;
            }

            if (!game.PlayerBlackId.HasValue)
            {
                game.Result = GameResult.Bye;
            }

            yield return game;
        }
    }

}