<div class="d-flex justify-content-between">
    <div class="w-500">
        <AutoSuggestLeagueParticipation @bind-Value="AddPlayerLeagueParticipationId" Players="leagueParticipations"
                                        PlayersLeft="leagueParticipationsLeft">
            <HxButton Color="ThemeColor.Light" Outline="true" @onclick="AddToTournament">Add</HxButton>
        </AutoSuggestLeagueParticipation>
    </div>
    <HxButton Color="ThemeColor.Primary" CssClass="mr-4"
              @onclick='() => NavigationManager.NavigateTo("/Manage/Tournaments/" + TournamentId + "/AddPlayer")'>
        New Player
    </HxButton>
</div>
<HxListGroup CssClass="mt-4">
    @foreach (var s in players)
    {
        <HxListGroupItem>
            @s.Player.FirstName @s.Player.LastName (@s.Player.Email)
        </HxListGroupItem>
    }
</HxListGroup>

@code {
    private ICollection<LeagueParticipation> leagueParticipations = [];

    private ICollection<LeagueParticipation> leagueParticipationsLeft => leagueParticipations
        .Where(x => players.All(y => y.PlayerId != x.PlayerId))
        .ToList();

    private ICollection<TournamentParticipation> players { get; set; } = [];
    private int? AddPlayerLeagueParticipationId { get; set; }

    [CascadingParameter(Name = "TournamentId")]
    protected string TournamentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        players = await dbContext.TournamentParticipations
            .Include(x => x.Player)
            .AsNoTracking()
            .Where(x => x.TournamentId == int.Parse(TournamentId))
            .ToListAsync();

        var tournament = await dbContext.Tournaments.FindAsync(int.Parse(TournamentId));

        leagueParticipations = await dbContext.LeagueParticipations
            .Where(x => x.LeagueId == tournament!.LeagueId)
            .Include(x => x.Player)
            .AsNoTracking()
            .ToListAsync();
    }

    private async Task AddToTournament()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        if (AddPlayerLeagueParticipationId.HasValue)
        {
            var lp = await dbContext.LeagueParticipations.FindAsync(AddPlayerLeagueParticipationId);
            if (lp != null)
            {
                dbContext.TournamentParticipations.Add(new TournamentParticipation
                {
                    PlayerId = lp.PlayerId,
                    TournamentId = int.Parse(TournamentId)
                });
                await dbContext.SaveChangesAsync();

                await OnInitializedAsync();

                AddPlayerLeagueParticipationId = null;
            }
        }
    }
}