<div class="d-flex justify-content-between">
    <div class="w-500">
        <AutoSuggestLeaguePlayers @bind-Value="AddPlayerId" Players="players"
                                        PlayersLeft="playersLeft">
            <HxButton Color="ThemeColor.Light" Outline="true" @onclick="AddToTournament">Add</HxButton>
        </AutoSuggestLeaguePlayers>
    </div>
    <HxButton Color="ThemeColor.Primary" CssClass="mr-4"
              @onclick='() => NavigationManager.NavigateTo("/Manage/Tournaments/" + TournamentId + "/AddPlayer")'>
        New Player
    </HxButton>
</div>
<HxListGroup CssClass="mt-4">
    @foreach (var s in tournamentParticipations)
    {
        <HxListGroupItem>
            @s.Player.FirstName @s.Player.LastName (@s.Player.Email)
        </HxListGroupItem>
    }
</HxListGroup>

@code {
    private ICollection<Player> players = [];

    private ICollection<Player> playersLeft => players
        .Where(x => tournamentParticipations.All(y => y.PlayerId != x.Id))
        .ToList();

    private ICollection<TournamentParticipation> tournamentParticipations { get; set; } = [];
    private int? AddPlayerId { get; set; }

    [CascadingParameter(Name = "TournamentId")]
    protected string TournamentId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        tournamentParticipations = await dbContext.TournamentParticipations
            .Include(x => x.Player)
            .AsNoTracking()
            .Where(x => x.TournamentId == int.Parse(TournamentId))
            .ToListAsync();

        var tournament = await dbContext.Tournaments.FindAsync(int.Parse(TournamentId));

        players = await dbContext.Players
            .Where(x => x.LeagueId == tournament!.LeagueId)
            .AsNoTracking()
            .ToListAsync();
    }

    private async Task AddToTournament()
    {
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        if (AddPlayerId.HasValue)
        {
            var player = await dbContext.Players.FindAsync(AddPlayerId);
            if (player != null)
            {
                dbContext.TournamentParticipations.Add(new TournamentParticipation
                {
                    PlayerId = player.Id,
                    TournamentId = int.Parse(TournamentId)
                });
                await dbContext.SaveChangesAsync();

                await OnInitializedAsync();

                AddPlayerId = null;
            }
        }
    }
}